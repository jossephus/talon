// Generated from generate.zig
// and updated to fix unhandled cases

const std = @import("std");
const wren = @cImport({
    @cInclude("wren.h");
    @cInclude("stdio.h");
});
const r = @cImport({
    @cInclude("raylib.h");
    @cInclude("raymath.h");
    @cInclude("rlgl.h");
});
const root = @import("../common.zig");
const MathBindings = @import("math.zig");
const BuiltinBindings = @import("builtin.zig");
const RaylibBindings = @import("raylib.zig");

pub const ForeignMethodBindings = std.StaticStringMap(?*const WrenForeignMethodFn).initComptime(.{
    .{ "raylib.Raylib.initWindow(_,_,_)", RaylibBindings.wren_raylib_init_window },
    .{ "raylib.Raylib.closeWindow()", RaylibBindings.wren_raylib_close_window },
    .{ "raylib.Raylib.windowShouldClose()", RaylibBindings.wren_raylib_window_should_close },
    .{ "raylib.Raylib.isWindowReady()", RaylibBindings.wren_raylib_is_window_ready },
    .{ "raylib.Raylib.isWindowFullscreen()", RaylibBindings.wren_raylib_is_window_fullscreen },
    .{ "raylib.Raylib.isWindowHidden()", RaylibBindings.wren_raylib_is_window_hidden },
    .{ "raylib.Raylib.isWindowMinimized()", RaylibBindings.wren_raylib_is_window_minimized },
    .{ "raylib.Raylib.isWindowMaximized()", RaylibBindings.wren_raylib_is_window_maximized },
    .{ "raylib.Raylib.isWindowFocused()", RaylibBindings.wren_raylib_is_window_focused },
    .{ "raylib.Raylib.isWindowResized()", RaylibBindings.wren_raylib_is_window_resized },
    .{ "raylib.Raylib.isWindowState(_)", RaylibBindings.wren_raylib_is_window_state },
    .{ "raylib.Raylib.setWindowState(_)", RaylibBindings.wren_raylib_set_window_state },
    .{ "raylib.Raylib.clearWindowState(_)", RaylibBindings.wren_raylib_clear_window_state },
    .{ "raylib.Raylib.toggleFullscreen()", RaylibBindings.wren_raylib_toggle_fullscreen },
    .{ "raylib.Raylib.toggleBorderlessWindowed()", RaylibBindings.wren_raylib_toggle_borderless_windowed },
    .{ "raylib.Raylib.maximizeWindow()", RaylibBindings.wren_raylib_maximize_window },
    .{ "raylib.Raylib.minimizeWindow()", RaylibBindings.wren_raylib_minimize_window },
    .{ "raylib.Raylib.restoreWindow()", RaylibBindings.wren_raylib_restore_window },
    .{ "raylib.Raylib.setWindowIcon(_)", RaylibBindings.wren_raylib_set_window_icon },
    .{ "raylib.Raylib.setWindowIcons(_,_)", RaylibBindings.wren_raylib_set_window_icons },
    .{ "raylib.Raylib.setWindowTitle(_)", RaylibBindings.wren_raylib_set_window_title },
    .{ "raylib.Raylib.setWindowPosition(_,_)", RaylibBindings.wren_raylib_set_window_position },
    .{ "raylib.Raylib.setWindowMonitor(_)", RaylibBindings.wren_raylib_set_window_monitor },
    .{ "raylib.Raylib.setWindowMinSize(_,_)", RaylibBindings.wren_raylib_set_window_min_size },
    .{ "raylib.Raylib.setWindowMaxSize(_,_)", RaylibBindings.wren_raylib_set_window_max_size },
    .{ "raylib.Raylib.setWindowSize(_,_)", RaylibBindings.wren_raylib_set_window_size },
    .{ "raylib.Raylib.setWindowOpacity(_)", RaylibBindings.wren_raylib_set_window_opacity },
    .{ "raylib.Raylib.setWindowFocused()", RaylibBindings.wren_raylib_set_window_focused },
    .{ "raylib.Raylib.getScreenWidth()", RaylibBindings.wren_raylib_get_screen_width },
    .{ "raylib.Raylib.getScreenHeight()", RaylibBindings.wren_raylib_get_screen_height },
    .{ "raylib.Raylib.getRenderWidth()", RaylibBindings.wren_raylib_get_render_width },
    .{ "raylib.Raylib.getRenderHeight()", RaylibBindings.wren_raylib_get_render_height },
    .{ "raylib.Raylib.getMonitorCount()", RaylibBindings.wren_raylib_get_monitor_count },
    .{ "raylib.Raylib.getCurrentMonitor()", RaylibBindings.wren_raylib_get_current_monitor },
    .{ "raylib.Raylib.getMonitorPosition(_)", RaylibBindings.wren_raylib_get_monitor_position },
    .{ "raylib.Raylib.getMonitorWidth(_)", RaylibBindings.wren_raylib_get_monitor_width },
    .{ "raylib.Raylib.getMonitorHeight(_)", RaylibBindings.wren_raylib_get_monitor_height },
    .{ "raylib.Raylib.getMonitorPhysicalWidth(_)", RaylibBindings.wren_raylib_get_monitor_physical_width },
    .{ "raylib.Raylib.getMonitorPhysicalHeight(_)", RaylibBindings.wren_raylib_get_monitor_physical_height },
    .{ "raylib.Raylib.getMonitorRefreshRate(_)", RaylibBindings.wren_raylib_get_monitor_refresh_rate },
    .{ "raylib.Raylib.getWindowPosition()", RaylibBindings.wren_raylib_get_window_position },
    .{ "raylib.Raylib.getWindowScaleDPI()", RaylibBindings.wren_raylib_get_window_scale_d_p_i },
    .{ "raylib.Raylib.getMonitorName(_)", RaylibBindings.wren_raylib_get_monitor_name },
    .{ "raylib.Raylib.setClipboardText(_)", RaylibBindings.wren_raylib_set_clipboard_text },
    .{ "raylib.Raylib.getClipboardText()", RaylibBindings.wren_raylib_get_clipboard_text },
    .{ "raylib.Raylib.getClipboardImage()", RaylibBindings.wren_raylib_get_clipboard_image },
    .{ "raylib.Raylib.enableEventWaiting()", RaylibBindings.wren_raylib_enable_event_waiting },
    .{ "raylib.Raylib.disableEventWaiting()", RaylibBindings.wren_raylib_disable_event_waiting },
    .{ "raylib.Raylib.showCursor()", RaylibBindings.wren_raylib_show_cursor },
    .{ "raylib.Raylib.hideCursor()", RaylibBindings.wren_raylib_hide_cursor },
    .{ "raylib.Raylib.isCursorHidden()", RaylibBindings.wren_raylib_is_cursor_hidden },
    .{ "raylib.Raylib.enableCursor()", RaylibBindings.wren_raylib_enable_cursor },
    .{ "raylib.Raylib.disableCursor()", RaylibBindings.wren_raylib_disable_cursor },
    .{ "raylib.Raylib.isCursorOnScreen()", RaylibBindings.wren_raylib_is_cursor_on_screen },
    .{ "raylib.Raylib.clearBackground(_)", RaylibBindings.wren_raylib_clear_background },
    .{ "raylib.Raylib.beginDrawing()", RaylibBindings.wren_raylib_begin_drawing },
    .{ "raylib.Raylib.endDrawing()", RaylibBindings.wren_raylib_end_drawing },
    .{ "raylib.Raylib.beginMode2D(_)", RaylibBindings.wren_raylib_begin_mode2_d },
    .{ "raylib.Raylib.endMode2D()", RaylibBindings.wren_raylib_end_mode2_d },
    .{ "raylib.Raylib.beginMode3D(_)", RaylibBindings.wren_raylib_begin_mode3_d },
    .{ "raylib.Raylib.endMode3D()", RaylibBindings.wren_raylib_end_mode3_d },
    .{ "raylib.Raylib.beginTextureMode(_)", RaylibBindings.wren_raylib_begin_texture_mode },
    .{ "raylib.Raylib.endTextureMode()", RaylibBindings.wren_raylib_end_texture_mode },
    .{ "raylib.Raylib.beginShaderMode(_)", RaylibBindings.wren_raylib_begin_shader_mode },
    .{ "raylib.Raylib.endShaderMode()", RaylibBindings.wren_raylib_end_shader_mode },
    .{ "raylib.Raylib.beginBlendMode(_)", RaylibBindings.wren_raylib_begin_blend_mode },
    .{ "raylib.Raylib.endBlendMode()", RaylibBindings.wren_raylib_end_blend_mode },
    .{ "raylib.Raylib.beginScissorMode(_,_,_,_)", RaylibBindings.wren_raylib_begin_scissor_mode },
    .{ "raylib.Raylib.endScissorMode()", RaylibBindings.wren_raylib_end_scissor_mode },
    .{ "raylib.Raylib.beginVrStereoMode(_)", RaylibBindings.wren_raylib_begin_vr_stereo_mode },
    .{ "raylib.Raylib.endVrStereoMode()", RaylibBindings.wren_raylib_end_vr_stereo_mode },
    .{ "raylib.Raylib.loadVrStereoConfig(_)", RaylibBindings.wren_raylib_load_vr_stereo_config },
    .{ "raylib.Raylib.unloadVrStereoConfig(_)", RaylibBindings.wren_raylib_unload_vr_stereo_config },
    .{ "raylib.Raylib.loadShader(_,_)", RaylibBindings.wren_raylib_load_shader },
    .{ "raylib.Raylib.loadShaderFromMemory(_,_)", RaylibBindings.wren_raylib_load_shader_from_memory },
    .{ "raylib.Raylib.isShaderValid(_)", RaylibBindings.wren_raylib_is_shader_valid },
    .{ "raylib.Raylib.getShaderLocation(_,_)", RaylibBindings.wren_raylib_get_shader_location },
    .{ "raylib.Raylib.getShaderLocationAttrib(_,_)", RaylibBindings.wren_raylib_get_shader_location_attrib },
    .{ "raylib.Raylib.setShaderValueMatrix(_,_,_)", RaylibBindings.wren_raylib_set_shader_value_matrix },
    .{ "raylib.Raylib.setShaderValueTexture(_,_,_)", RaylibBindings.wren_raylib_set_shader_value_texture },
    .{ "raylib.Raylib.unloadShader(_)", RaylibBindings.wren_raylib_unload_shader },
    .{ "raylib.Raylib.getScreenToWorldRay(_,_)", RaylibBindings.wren_raylib_get_screen_to_world_ray },
    .{ "raylib.Raylib.getScreenToWorldRayEx(_,_,_,_)", RaylibBindings.wren_raylib_get_screen_to_world_ray_ex },
    .{ "raylib.Raylib.getWorldToScreen(_,_)", RaylibBindings.wren_raylib_get_world_to_screen },
    .{ "raylib.Raylib.getWorldToScreenEx(_,_,_,_)", RaylibBindings.wren_raylib_get_world_to_screen_ex },
    .{ "raylib.Raylib.getWorldToScreen2D(_,_)", RaylibBindings.wren_raylib_get_world_to_screen2_d },
    .{ "raylib.Raylib.getScreenToWorld2D(_,_)", RaylibBindings.wren_raylib_get_screen_to_world2_d },
    .{ "raylib.Raylib.getCameraMatrix(_)", RaylibBindings.wren_raylib_get_camera_matrix },
    .{ "raylib.Raylib.getCameraMatrix2D(_)", RaylibBindings.wren_raylib_get_camera_matrix2_d },
    .{ "raylib.Raylib.setTargetFPS(_)", RaylibBindings.wren_raylib_set_target_f_p_s },
    .{ "raylib.Raylib.getFrameTime()", RaylibBindings.wren_raylib_get_frame_time },
    .{ "raylib.Raylib.getTime()", RaylibBindings.wren_raylib_get_time },
    .{ "raylib.Raylib.getFPS()", RaylibBindings.wren_raylib_get_f_p_s },
    .{ "raylib.Raylib.swapScreenBuffer()", RaylibBindings.wren_raylib_swap_screen_buffer },
    .{ "raylib.Raylib.pollInputEvents()", RaylibBindings.wren_raylib_poll_input_events },
    .{ "raylib.Raylib.waitTime(_)", RaylibBindings.wren_raylib_wait_time },
    .{ "raylib.Raylib.setRandomSeed(_)", RaylibBindings.wren_raylib_set_random_seed },
    .{ "raylib.Raylib.getRandomValue(_,_)", RaylibBindings.wren_raylib_get_random_value },
    .{ "raylib.Raylib.loadRandomSequence(_,_,_)", RaylibBindings.wren_raylib_load_random_sequence },
    .{ "raylib.Raylib.unloadRandomSequence(_)", RaylibBindings.wren_raylib_unload_random_sequence },
    .{ "raylib.Raylib.takeScreenshot(_)", RaylibBindings.wren_raylib_take_screenshot },
    .{ "raylib.Raylib.setConfigFlags(_)", RaylibBindings.wren_raylib_set_config_flags },
    .{ "raylib.Raylib.openURL(_)", RaylibBindings.wren_raylib_open_u_r_l },
    .{ "raylib.Raylib.setTraceLogLevel(_)", RaylibBindings.wren_raylib_set_trace_log_level },
    .{ "raylib.Raylib.memAlloc(_)", RaylibBindings.wren_raylib_mem_alloc },
    .{ "raylib.Raylib.setTraceLogCallback(_)", RaylibBindings.wren_raylib_set_trace_log_callback },
    .{ "raylib.Raylib.setLoadFileDataCallback(_)", RaylibBindings.wren_raylib_set_load_file_data_callback },
    .{ "raylib.Raylib.setSaveFileDataCallback(_)", RaylibBindings.wren_raylib_set_save_file_data_callback },
    .{ "raylib.Raylib.setLoadFileTextCallback(_)", RaylibBindings.wren_raylib_set_load_file_text_callback },
    .{ "raylib.Raylib.setSaveFileTextCallback(_)", RaylibBindings.wren_raylib_set_save_file_text_callback },
    .{ "raylib.Raylib.loadFileData(_,_)", RaylibBindings.wren_raylib_load_file_data },
    .{ "raylib.Raylib.unloadFileData(_)", RaylibBindings.wren_raylib_unload_file_data },
    .{ "raylib.Raylib.exportDataAsCode(_,_,_)", RaylibBindings.wren_raylib_export_data_as_code },
    .{ "raylib.Raylib.loadFileText(_)", RaylibBindings.wren_raylib_load_file_text },
    .{ "raylib.Raylib.unloadFileText(_)", RaylibBindings.wren_raylib_unload_file_text },
    .{ "raylib.Raylib.saveFileText(_,_)", RaylibBindings.wren_raylib_save_file_text },
    .{ "raylib.Raylib.fileExists(_)", RaylibBindings.wren_raylib_file_exists },
    .{ "raylib.Raylib.directoryExists(_)", RaylibBindings.wren_raylib_directory_exists },
    .{ "raylib.Raylib.isFileExtension(_,_)", RaylibBindings.wren_raylib_is_file_extension },
    .{ "raylib.Raylib.getFileLength(_)", RaylibBindings.wren_raylib_get_file_length },
    .{ "raylib.Raylib.getFileExtension(_)", RaylibBindings.wren_raylib_get_file_extension },
    .{ "raylib.Raylib.getFileName(_)", RaylibBindings.wren_raylib_get_file_name },
    .{ "raylib.Raylib.getFileNameWithoutExt(_)", RaylibBindings.wren_raylib_get_file_name_without_ext },
    .{ "raylib.Raylib.getDirectoryPath(_)", RaylibBindings.wren_raylib_get_directory_path },
    .{ "raylib.Raylib.getPrevDirectoryPath(_)", RaylibBindings.wren_raylib_get_prev_directory_path },
    .{ "raylib.Raylib.getWorkingDirectory()", RaylibBindings.wren_raylib_get_working_directory },
    .{ "raylib.Raylib.getApplicationDirectory()", RaylibBindings.wren_raylib_get_application_directory },
    .{ "raylib.Raylib.makeDirectory(_)", RaylibBindings.wren_raylib_make_directory },
    .{ "raylib.Raylib.changeDirectory(_)", RaylibBindings.wren_raylib_change_directory },
    .{ "raylib.Raylib.isPathFile(_)", RaylibBindings.wren_raylib_is_path_file },
    .{ "raylib.Raylib.isFileNameValid(_)", RaylibBindings.wren_raylib_is_file_name_valid },
    .{ "raylib.Raylib.loadDirectoryFiles(_)", RaylibBindings.wren_raylib_load_directory_files },
    .{ "raylib.Raylib.loadDirectoryFilesEx(_,_,_)", RaylibBindings.wren_raylib_load_directory_files_ex },
    .{ "raylib.Raylib.unloadDirectoryFiles(_)", RaylibBindings.wren_raylib_unload_directory_files },
    .{ "raylib.Raylib.isFileDropped()", RaylibBindings.wren_raylib_is_file_dropped },
    .{ "raylib.Raylib.loadDroppedFiles()", RaylibBindings.wren_raylib_load_dropped_files },
    .{ "raylib.Raylib.unloadDroppedFiles(_)", RaylibBindings.wren_raylib_unload_dropped_files },
    .{ "raylib.Raylib.getFileModTime(_)", RaylibBindings.wren_raylib_get_file_mod_time },
    .{ "raylib.Raylib.compressData(_,_,_)", RaylibBindings.wren_raylib_compress_data },
    .{ "raylib.Raylib.decompressData(_,_,_)", RaylibBindings.wren_raylib_decompress_data },
    .{ "raylib.Raylib.encodeDataBase64(_,_,_)", RaylibBindings.wren_raylib_encode_data_base64 },
    .{ "raylib.Raylib.decodeDataBase64(_,_)", RaylibBindings.wren_raylib_decode_data_base64 },
    .{ "raylib.Raylib.computeCRC32(_,_)", RaylibBindings.wren_raylib_compute_c_r_c32 },
    .{ "raylib.Raylib.computeMD5(_,_)", RaylibBindings.wren_raylib_compute_m_d5 },
    .{ "raylib.Raylib.computeSHA1(_,_)", RaylibBindings.wren_raylib_compute_s_h_a1 },
    .{ "raylib.Raylib.loadAutomationEventList(_)", RaylibBindings.wren_raylib_load_automation_event_list },
    .{ "raylib.Raylib.unloadAutomationEventList(_)", RaylibBindings.wren_raylib_unload_automation_event_list },
    .{ "raylib.Raylib.exportAutomationEventList(_,_)", RaylibBindings.wren_raylib_export_automation_event_list },
    .{ "raylib.Raylib.setAutomationEventList(_)", RaylibBindings.wren_raylib_set_automation_event_list },
    .{ "raylib.Raylib.setAutomationEventBaseFrame(_)", RaylibBindings.wren_raylib_set_automation_event_base_frame },
    .{ "raylib.Raylib.startAutomationEventRecording()", RaylibBindings.wren_raylib_start_automation_event_recording },
    .{ "raylib.Raylib.stopAutomationEventRecording()", RaylibBindings.wren_raylib_stop_automation_event_recording },
    .{ "raylib.Raylib.playAutomationEvent(_)", RaylibBindings.wren_raylib_play_automation_event },
    .{ "raylib.Raylib.isKeyPressed(_)", RaylibBindings.wren_raylib_is_key_pressed },
    .{ "raylib.Raylib.isKeyPressedRepeat(_)", RaylibBindings.wren_raylib_is_key_pressed_repeat },
    .{ "raylib.Raylib.isKeyDown(_)", RaylibBindings.wren_raylib_is_key_down },
    .{ "raylib.Raylib.isKeyReleased(_)", RaylibBindings.wren_raylib_is_key_released },
    .{ "raylib.Raylib.isKeyUp(_)", RaylibBindings.wren_raylib_is_key_up },
    .{ "raylib.Raylib.getKeyPressed()", RaylibBindings.wren_raylib_get_key_pressed },
    .{ "raylib.Raylib.getCharPressed()", RaylibBindings.wren_raylib_get_char_pressed },
    .{ "raylib.Raylib.setExitKey(_)", RaylibBindings.wren_raylib_set_exit_key },
    .{ "raylib.Raylib.isGamepadAvailable(_)", RaylibBindings.wren_raylib_is_gamepad_available },
    .{ "raylib.Raylib.getGamepadName(_)", RaylibBindings.wren_raylib_get_gamepad_name },
    .{ "raylib.Raylib.isGamepadButtonPressed(_,_)", RaylibBindings.wren_raylib_is_gamepad_button_pressed },
    .{ "raylib.Raylib.isGamepadButtonDown(_,_)", RaylibBindings.wren_raylib_is_gamepad_button_down },
    .{ "raylib.Raylib.isGamepadButtonReleased(_,_)", RaylibBindings.wren_raylib_is_gamepad_button_released },
    .{ "raylib.Raylib.isGamepadButtonUp(_,_)", RaylibBindings.wren_raylib_is_gamepad_button_up },
    .{ "raylib.Raylib.getGamepadButtonPressed()", RaylibBindings.wren_raylib_get_gamepad_button_pressed },
    .{ "raylib.Raylib.getGamepadAxisCount(_)", RaylibBindings.wren_raylib_get_gamepad_axis_count },
    .{ "raylib.Raylib.getGamepadAxisMovement(_,_)", RaylibBindings.wren_raylib_get_gamepad_axis_movement },
    .{ "raylib.Raylib.setGamepadMappings(_)", RaylibBindings.wren_raylib_set_gamepad_mappings },
    .{ "raylib.Raylib.setGamepadVibration(_,_,_,_)", RaylibBindings.wren_raylib_set_gamepad_vibration },
    .{ "raylib.Raylib.isMouseButtonPressed(_)", RaylibBindings.wren_raylib_is_mouse_button_pressed },
    .{ "raylib.Raylib.isMouseButtonDown(_)", RaylibBindings.wren_raylib_is_mouse_button_down },
    .{ "raylib.Raylib.isMouseButtonReleased(_)", RaylibBindings.wren_raylib_is_mouse_button_released },
    .{ "raylib.Raylib.isMouseButtonUp(_)", RaylibBindings.wren_raylib_is_mouse_button_up },
    .{ "raylib.Raylib.getMouseX()", RaylibBindings.wren_raylib_get_mouse_x },
    .{ "raylib.Raylib.getMouseY()", RaylibBindings.wren_raylib_get_mouse_y },
    .{ "raylib.Raylib.getMousePosition()", RaylibBindings.wren_raylib_get_mouse_position },
    .{ "raylib.Raylib.getMouseDelta()", RaylibBindings.wren_raylib_get_mouse_delta },
    .{ "raylib.Raylib.setMousePosition(_,_)", RaylibBindings.wren_raylib_set_mouse_position },
    .{ "raylib.Raylib.setMouseOffset(_,_)", RaylibBindings.wren_raylib_set_mouse_offset },
    .{ "raylib.Raylib.setMouseScale(_,_)", RaylibBindings.wren_raylib_set_mouse_scale },
    .{ "raylib.Raylib.getMouseWheelMove()", RaylibBindings.wren_raylib_get_mouse_wheel_move },
    .{ "raylib.Raylib.getMouseWheelMoveV()", RaylibBindings.wren_raylib_get_mouse_wheel_move_v },
    .{ "raylib.Raylib.setMouseCursor(_)", RaylibBindings.wren_raylib_set_mouse_cursor },
    .{ "raylib.Raylib.getTouchX()", RaylibBindings.wren_raylib_get_touch_x },
    .{ "raylib.Raylib.getTouchY()", RaylibBindings.wren_raylib_get_touch_y },
    .{ "raylib.Raylib.getTouchPosition(_)", RaylibBindings.wren_raylib_get_touch_position },
    .{ "raylib.Raylib.getTouchPointId(_)", RaylibBindings.wren_raylib_get_touch_point_id },
    .{ "raylib.Raylib.getTouchPointCount()", RaylibBindings.wren_raylib_get_touch_point_count },
    .{ "raylib.Raylib.setGesturesEnabled(_)", RaylibBindings.wren_raylib_set_gestures_enabled },
    .{ "raylib.Raylib.isGestureDetected(_)", RaylibBindings.wren_raylib_is_gesture_detected },
    .{ "raylib.Raylib.getGestureDetected()", RaylibBindings.wren_raylib_get_gesture_detected },
    .{ "raylib.Raylib.getGestureHoldDuration()", RaylibBindings.wren_raylib_get_gesture_hold_duration },
    .{ "raylib.Raylib.getGestureDragVector()", RaylibBindings.wren_raylib_get_gesture_drag_vector },
    .{ "raylib.Raylib.getGestureDragAngle()", RaylibBindings.wren_raylib_get_gesture_drag_angle },
    .{ "raylib.Raylib.getGesturePinchVector()", RaylibBindings.wren_raylib_get_gesture_pinch_vector },
    .{ "raylib.Raylib.getGesturePinchAngle()", RaylibBindings.wren_raylib_get_gesture_pinch_angle },
    .{ "raylib.Raylib.updateCamera(_,_)", RaylibBindings.wren_raylib_update_camera },
    .{ "raylib.Raylib.updateCameraPro(_,_,_,_)", RaylibBindings.wren_raylib_update_camera_pro },
    .{ "raylib.Raylib.drawPixel(_,_,_)", RaylibBindings.wren_raylib_draw_pixel },
    .{ "raylib.Raylib.drawPixelV(_,_)", RaylibBindings.wren_raylib_draw_pixel_v },
    .{ "raylib.Raylib.drawLine(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_line },
    .{ "raylib.Raylib.drawLineV(_,_,_)", RaylibBindings.wren_raylib_draw_line_v },
    .{ "raylib.Raylib.drawLineEx(_,_,_,_)", RaylibBindings.wren_raylib_draw_line_ex },
    .{ "raylib.Raylib.drawLineStrip(_,_,_)", RaylibBindings.wren_raylib_draw_line_strip },
    .{ "raylib.Raylib.drawLineBezier(_,_,_,_)", RaylibBindings.wren_raylib_draw_line_bezier },
    .{ "raylib.Raylib.drawCircle(_,_,_,_)", RaylibBindings.wren_raylib_draw_circle },
    .{ "raylib.Raylib.drawCircleSector(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_circle_sector },
    .{ "raylib.Raylib.drawCircleSectorLines(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_circle_sector_lines },
    .{ "raylib.Raylib.drawCircleGradient(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_circle_gradient },
    .{ "raylib.Raylib.drawCircleV(_,_,_)", RaylibBindings.wren_raylib_draw_circle_v },
    .{ "raylib.Raylib.drawCircleLines(_,_,_,_)", RaylibBindings.wren_raylib_draw_circle_lines },
    .{ "raylib.Raylib.drawCircleLinesV(_,_,_)", RaylibBindings.wren_raylib_draw_circle_lines_v },
    .{ "raylib.Raylib.drawEllipse(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_ellipse },
    .{ "raylib.Raylib.drawEllipseLines(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_ellipse_lines },
    .{ "raylib.Raylib.drawRing(_,_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_ring },
    .{ "raylib.Raylib.drawRingLines(_,_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_ring_lines },
    .{ "raylib.Raylib.drawRectangle(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle },
    .{ "raylib.Raylib.drawRectangleV(_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_v },
    .{ "raylib.Raylib.drawRectangleRec(_,_)", RaylibBindings.wren_raylib_draw_rectangle_rec },
    .{ "raylib.Raylib.drawRectanglePro(_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_pro },
    .{ "raylib.Raylib.drawRectangleGradientV(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_gradient_v },
    .{ "raylib.Raylib.drawRectangleGradientH(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_gradient_h },
    .{ "raylib.Raylib.drawRectangleGradientEx(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_gradient_ex },
    .{ "raylib.Raylib.drawRectangleLines(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_lines },
    .{ "raylib.Raylib.drawRectangleLinesEx(_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_lines_ex },
    .{ "raylib.Raylib.drawRectangleRounded(_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_rounded },
    .{ "raylib.Raylib.drawRectangleRoundedLines(_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_rounded_lines },
    .{ "raylib.Raylib.drawRectangleRoundedLinesEx(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_rectangle_rounded_lines_ex },
    .{ "raylib.Raylib.drawTriangle(_,_,_,_)", RaylibBindings.wren_raylib_draw_triangle },
    .{ "raylib.Raylib.drawTriangleLines(_,_,_,_)", RaylibBindings.wren_raylib_draw_triangle_lines },
    .{ "raylib.Raylib.drawTriangleFan(_,_,_)", RaylibBindings.wren_raylib_draw_triangle_fan },
    .{ "raylib.Raylib.drawTriangleStrip(_,_,_)", RaylibBindings.wren_raylib_draw_triangle_strip },
    .{ "raylib.Raylib.drawPoly(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_poly },
    .{ "raylib.Raylib.drawPolyLines(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_poly_lines },
    .{ "raylib.Raylib.drawPolyLinesEx(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_poly_lines_ex },
    .{ "raylib.Raylib.drawSplineLinear(_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_linear },
    .{ "raylib.Raylib.drawSplineBasis(_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_basis },
    .{ "raylib.Raylib.drawSplineCatmullRom(_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_catmull_rom },
    .{ "raylib.Raylib.drawSplineBezierQuadratic(_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_bezier_quadratic },
    .{ "raylib.Raylib.drawSplineBezierCubic(_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_bezier_cubic },
    .{ "raylib.Raylib.drawSplineSegmentLinear(_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_segment_linear },
    .{ "raylib.Raylib.drawSplineSegmentBasis(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_segment_basis },
    .{ "raylib.Raylib.drawSplineSegmentCatmullRom(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_segment_catmull_rom },
    .{ "raylib.Raylib.drawSplineSegmentBezierQuadratic(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_segment_bezier_quadratic },
    .{ "raylib.Raylib.drawSplineSegmentBezierCubic(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_spline_segment_bezier_cubic },
    .{ "raylib.Raylib.getSplinePointLinear(_,_,_)", RaylibBindings.wren_raylib_get_spline_point_linear },
    .{ "raylib.Raylib.getSplinePointBasis(_,_,_,_,_)", RaylibBindings.wren_raylib_get_spline_point_basis },
    .{ "raylib.Raylib.getSplinePointCatmullRom(_,_,_,_,_)", RaylibBindings.wren_raylib_get_spline_point_catmull_rom },
    .{ "raylib.Raylib.getSplinePointBezierQuad(_,_,_,_)", RaylibBindings.wren_raylib_get_spline_point_bezier_quad },
    .{ "raylib.Raylib.getSplinePointBezierCubic(_,_,_,_,_)", RaylibBindings.wren_raylib_get_spline_point_bezier_cubic },
    .{ "raylib.Raylib.checkCollisionRecs(_,_)", RaylibBindings.wren_raylib_check_collision_recs },
    .{ "raylib.Raylib.checkCollisionCircles(_,_,_,_)", RaylibBindings.wren_raylib_check_collision_circles },
    .{ "raylib.Raylib.checkCollisionCircleRec(_,_,_)", RaylibBindings.wren_raylib_check_collision_circle_rec },
    .{ "raylib.Raylib.checkCollisionCircleLine(_,_,_,_)", RaylibBindings.wren_raylib_check_collision_circle_line },
    .{ "raylib.Raylib.checkCollisionPointRec(_,_)", RaylibBindings.wren_raylib_check_collision_point_rec },
    .{ "raylib.Raylib.checkCollisionPointCircle(_,_,_)", RaylibBindings.wren_raylib_check_collision_point_circle },
    .{ "raylib.Raylib.checkCollisionPointTriangle(_,_,_,_)", RaylibBindings.wren_raylib_check_collision_point_triangle },
    .{ "raylib.Raylib.checkCollisionPointLine(_,_,_,_)", RaylibBindings.wren_raylib_check_collision_point_line },
    .{ "raylib.Raylib.checkCollisionPointPoly(_,_,_)", RaylibBindings.wren_raylib_check_collision_point_poly },
    .{ "raylib.Raylib.checkCollisionLines(_,_,_,_,_)", RaylibBindings.wren_raylib_check_collision_lines },
    .{ "raylib.Raylib.getCollisionRec(_,_)", RaylibBindings.wren_raylib_get_collision_rec },
    .{ "raylib.Raylib.setShapesTexture(_,_)", RaylibBindings.wren_raylib_set_shapes_texture },
    .{ "raylib.Raylib.getShapesTexture()", RaylibBindings.wren_raylib_get_shapes_texture },
    .{ "raylib.Raylib.getShapesTextureRectangle()", RaylibBindings.wren_raylib_get_shapes_texture_rectangle },
    .{ "raylib.Raylib.loadImage(_)", RaylibBindings.wren_raylib_load_image },
    .{ "raylib.Raylib.loadImageRaw(_,_,_,_,_)", RaylibBindings.wren_raylib_load_image_raw },
    .{ "raylib.Raylib.loadImageAnim(_,_)", RaylibBindings.wren_raylib_load_image_anim },
    .{ "raylib.Raylib.loadImageAnimFromMemory(_,_,_,_)", RaylibBindings.wren_raylib_load_image_anim_from_memory },
    .{ "raylib.Raylib.loadImageFromMemory(_,_,_)", RaylibBindings.wren_raylib_load_image_from_memory },
    .{ "raylib.Raylib.loadImageFromTexture(_)", RaylibBindings.wren_raylib_load_image_from_texture },
    .{ "raylib.Raylib.loadImageFromScreen()", RaylibBindings.wren_raylib_load_image_from_screen },
    .{ "raylib.Raylib.isImageValid(_)", RaylibBindings.wren_raylib_is_image_valid },
    .{ "raylib.Raylib.unloadImage(_)", RaylibBindings.wren_raylib_unload_image },
    .{ "raylib.Raylib.exportImage(_,_)", RaylibBindings.wren_raylib_export_image },
    .{ "raylib.Raylib.exportImageToMemory(_,_,_)", RaylibBindings.wren_raylib_export_image_to_memory },
    .{ "raylib.Raylib.exportImageAsCode(_,_)", RaylibBindings.wren_raylib_export_image_as_code },
    .{ "raylib.Raylib.genImageColor(_,_,_)", RaylibBindings.wren_raylib_gen_image_color },
    .{ "raylib.Raylib.genImageGradientLinear(_,_,_,_,_)", RaylibBindings.wren_raylib_gen_image_gradient_linear },
    .{ "raylib.Raylib.genImageGradientRadial(_,_,_,_,_)", RaylibBindings.wren_raylib_gen_image_gradient_radial },
    .{ "raylib.Raylib.genImageGradientSquare(_,_,_,_,_)", RaylibBindings.wren_raylib_gen_image_gradient_square },
    .{ "raylib.Raylib.genImageChecked(_,_,_,_,_,_)", RaylibBindings.wren_raylib_gen_image_checked },
    .{ "raylib.Raylib.genImageWhiteNoise(_,_,_)", RaylibBindings.wren_raylib_gen_image_white_noise },
    .{ "raylib.Raylib.genImagePerlinNoise(_,_,_,_,_)", RaylibBindings.wren_raylib_gen_image_perlin_noise },
    .{ "raylib.Raylib.genImageCellular(_,_,_)", RaylibBindings.wren_raylib_gen_image_cellular },
    .{ "raylib.Raylib.genImageText(_,_,_)", RaylibBindings.wren_raylib_gen_image_text },
    .{ "raylib.Raylib.imageCopy(_)", RaylibBindings.wren_raylib_image_copy },
    .{ "raylib.Raylib.imageFromImage(_,_)", RaylibBindings.wren_raylib_image_from_image },
    .{ "raylib.Raylib.imageFromChannel(_,_)", RaylibBindings.wren_raylib_image_from_channel },
    .{ "raylib.Raylib.imageText(_,_,_)", RaylibBindings.wren_raylib_image_text },
    .{ "raylib.Raylib.imageTextEx(_,_,_,_,_)", RaylibBindings.wren_raylib_image_text_ex },
    .{ "raylib.Raylib.imageFormat(_,_)", RaylibBindings.wren_raylib_image_format },
    .{ "raylib.Raylib.imageToPOT(_,_)", RaylibBindings.wren_raylib_image_to_p_o_t },
    .{ "raylib.Raylib.imageCrop(_,_)", RaylibBindings.wren_raylib_image_crop },
    .{ "raylib.Raylib.imageAlphaCrop(_,_)", RaylibBindings.wren_raylib_image_alpha_crop },
    .{ "raylib.Raylib.imageAlphaClear(_,_,_)", RaylibBindings.wren_raylib_image_alpha_clear },
    .{ "raylib.Raylib.imageAlphaMask(_,_)", RaylibBindings.wren_raylib_image_alpha_mask },
    .{ "raylib.Raylib.imageAlphaPremultiply(_)", RaylibBindings.wren_raylib_image_alpha_premultiply },
    .{ "raylib.Raylib.imageBlurGaussian(_,_)", RaylibBindings.wren_raylib_image_blur_gaussian },
    .{ "raylib.Raylib.imageKernelConvolution(_,_,_)", RaylibBindings.wren_raylib_image_kernel_convolution },
    .{ "raylib.Raylib.imageResize(_,_,_)", RaylibBindings.wren_raylib_image_resize },
    .{ "raylib.Raylib.imageResizeNN(_,_,_)", RaylibBindings.wren_raylib_image_resize_n_n },
    .{ "raylib.Raylib.imageResizeCanvas(_,_,_,_,_,_)", RaylibBindings.wren_raylib_image_resize_canvas },
    .{ "raylib.Raylib.imageMipmaps(_)", RaylibBindings.wren_raylib_image_mipmaps },
    .{ "raylib.Raylib.imageDither(_,_,_,_,_)", RaylibBindings.wren_raylib_image_dither },
    .{ "raylib.Raylib.imageFlipVertical(_)", RaylibBindings.wren_raylib_image_flip_vertical },
    .{ "raylib.Raylib.imageFlipHorizontal(_)", RaylibBindings.wren_raylib_image_flip_horizontal },
    .{ "raylib.Raylib.imageRotate(_,_)", RaylibBindings.wren_raylib_image_rotate },
    .{ "raylib.Raylib.imageRotateCW(_)", RaylibBindings.wren_raylib_image_rotate_c_w },
    .{ "raylib.Raylib.imageRotateCCW(_)", RaylibBindings.wren_raylib_image_rotate_c_c_w },
    .{ "raylib.Raylib.imageColorTint(_,_)", RaylibBindings.wren_raylib_image_color_tint },
    .{ "raylib.Raylib.imageColorInvert(_)", RaylibBindings.wren_raylib_image_color_invert },
    .{ "raylib.Raylib.imageColorGrayscale(_)", RaylibBindings.wren_raylib_image_color_grayscale },
    .{ "raylib.Raylib.imageColorContrast(_,_)", RaylibBindings.wren_raylib_image_color_contrast },
    .{ "raylib.Raylib.imageColorBrightness(_,_)", RaylibBindings.wren_raylib_image_color_brightness },
    .{ "raylib.Raylib.imageColorReplace(_,_,_)", RaylibBindings.wren_raylib_image_color_replace },
    .{ "raylib.Raylib.loadImageColors(_)", RaylibBindings.wren_raylib_load_image_colors },
    .{ "raylib.Raylib.loadImagePalette(_,_,_)", RaylibBindings.wren_raylib_load_image_palette },
    .{ "raylib.Raylib.unloadImageColors(_)", RaylibBindings.wren_raylib_unload_image_colors },
    .{ "raylib.Raylib.unloadImagePalette(_)", RaylibBindings.wren_raylib_unload_image_palette },
    .{ "raylib.Raylib.getImageAlphaBorder(_,_)", RaylibBindings.wren_raylib_get_image_alpha_border },
    .{ "raylib.Raylib.getImageColor(_,_,_)", RaylibBindings.wren_raylib_get_image_color },
    .{ "raylib.Raylib.imageClearBackground(_,_)", RaylibBindings.wren_raylib_image_clear_background },
    .{ "raylib.Raylib.imageDrawPixel(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_pixel },
    .{ "raylib.Raylib.imageDrawPixelV(_,_,_)", RaylibBindings.wren_raylib_image_draw_pixel_v },
    .{ "raylib.Raylib.imageDrawLine(_,_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_line },
    .{ "raylib.Raylib.imageDrawLineV(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_line_v },
    .{ "raylib.Raylib.imageDrawLineEx(_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_line_ex },
    .{ "raylib.Raylib.imageDrawCircle(_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_circle },
    .{ "raylib.Raylib.imageDrawCircleV(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_circle_v },
    .{ "raylib.Raylib.imageDrawCircleLines(_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_circle_lines },
    .{ "raylib.Raylib.imageDrawCircleLinesV(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_circle_lines_v },
    .{ "raylib.Raylib.imageDrawRectangle(_,_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_rectangle },
    .{ "raylib.Raylib.imageDrawRectangleV(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_rectangle_v },
    .{ "raylib.Raylib.imageDrawRectangleRec(_,_,_)", RaylibBindings.wren_raylib_image_draw_rectangle_rec },
    .{ "raylib.Raylib.imageDrawRectangleLines(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_rectangle_lines },
    .{ "raylib.Raylib.imageDrawTriangle(_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_triangle },
    .{ "raylib.Raylib.imageDrawTriangleEx(_,_,_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_triangle_ex },
    .{ "raylib.Raylib.imageDrawTriangleLines(_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_triangle_lines },
    .{ "raylib.Raylib.imageDrawTriangleFan(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_triangle_fan },
    .{ "raylib.Raylib.imageDrawTriangleStrip(_,_,_,_)", RaylibBindings.wren_raylib_image_draw_triangle_strip },
    .{ "raylib.Raylib.imageDraw(_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw },
    .{ "raylib.Raylib.imageDrawText(_,_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_text },
    .{ "raylib.Raylib.imageDrawTextEx(_,_,_,_,_,_,_)", RaylibBindings.wren_raylib_image_draw_text_ex },
    .{ "raylib.Raylib.loadTexture(_)", RaylibBindings.wren_raylib_load_texture },
    .{ "raylib.Raylib.loadTextureFromImage(_)", RaylibBindings.wren_raylib_load_texture_from_image },
    .{ "raylib.Raylib.loadTextureCubemap(_,_)", RaylibBindings.wren_raylib_load_texture_cubemap },
    .{ "raylib.Raylib.isTextureValid(_)", RaylibBindings.wren_raylib_is_texture_valid },
    .{ "raylib.Raylib.unloadTexture(_)", RaylibBindings.wren_raylib_unload_texture },
    .{ "raylib.Raylib.isRenderTextureValid(_)", RaylibBindings.wren_raylib_is_render_texture_valid },
    .{ "raylib.Raylib.unloadRenderTexture(_)", RaylibBindings.wren_raylib_unload_render_texture },
    .{ "raylib.Raylib.updateTexture(_,_)", RaylibBindings.wren_raylib_update_texture },
    .{ "raylib.Raylib.updateTextureRec(_,_,_)", RaylibBindings.wren_raylib_update_texture_rec },
    .{ "raylib.Raylib.genTextureMipmaps(_)", RaylibBindings.wren_raylib_gen_texture_mipmaps },
    .{ "raylib.Raylib.setTextureFilter(_,_)", RaylibBindings.wren_raylib_set_texture_filter },
    .{ "raylib.Raylib.setTextureWrap(_,_)", RaylibBindings.wren_raylib_set_texture_wrap },
    .{ "raylib.Raylib.drawTexture(_,_,_,_)", RaylibBindings.wren_raylib_draw_texture },
    .{ "raylib.Raylib.drawTextureV(_,_,_)", RaylibBindings.wren_raylib_draw_texture_v },
    .{ "raylib.Raylib.drawTextureEx(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_texture_ex },
    .{ "raylib.Raylib.drawTextureRec(_,_,_,_)", RaylibBindings.wren_raylib_draw_texture_rec },
    .{ "raylib.Raylib.drawTexturePro(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_texture_pro },
    .{ "raylib.Raylib.drawTextureNPatch(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_texture_n_patch },
    .{ "raylib.Raylib.colorIsEqual(_,_)", RaylibBindings.wren_raylib_color_is_equal },
    .{ "raylib.Raylib.fade(_,_)", RaylibBindings.wren_raylib_fade },
    .{ "raylib.Raylib.colorToInt(_)", RaylibBindings.wren_raylib_color_to_int },
    .{ "raylib.Raylib.colorNormalize(_)", RaylibBindings.wren_raylib_color_normalize },
    .{ "raylib.Raylib.colorFromNormalized(_)", RaylibBindings.wren_raylib_color_from_normalized },
    .{ "raylib.Raylib.colorToHSV(_)", RaylibBindings.wren_raylib_color_to_h_s_v },
    .{ "raylib.Raylib.colorFromHSV(_,_,_)", RaylibBindings.wren_raylib_color_from_h_s_v },
    .{ "raylib.Raylib.colorTint(_,_)", RaylibBindings.wren_raylib_color_tint },
    .{ "raylib.Raylib.colorBrightness(_,_)", RaylibBindings.wren_raylib_color_brightness },
    .{ "raylib.Raylib.colorContrast(_,_)", RaylibBindings.wren_raylib_color_contrast },
    .{ "raylib.Raylib.colorAlpha(_,_)", RaylibBindings.wren_raylib_color_alpha },
    .{ "raylib.Raylib.colorAlphaBlend(_,_,_)", RaylibBindings.wren_raylib_color_alpha_blend },
    .{ "raylib.Raylib.colorLerp(_,_,_)", RaylibBindings.wren_raylib_color_lerp },
    .{ "raylib.Raylib.getColor(_)", RaylibBindings.wren_raylib_get_color },
    .{ "raylib.Raylib.getPixelColor(_,_)", RaylibBindings.wren_raylib_get_pixel_color },
    .{ "raylib.Raylib.setPixelColor(_,_,_)", RaylibBindings.wren_raylib_set_pixel_color },
    .{ "raylib.Raylib.getPixelDataSize(_,_,_)", RaylibBindings.wren_raylib_get_pixel_data_size },

    .{ "raylib.RenderTexture2D.texture", RaylibBindings.RenderTexture2D.texture },
    .{ "raylib.Texture2D.width", RaylibBindings.Texture2D.width },
    .{ "raylib.Texture2D.height", RaylibBindings.Texture2D.height },
    .{ "raylib.Texture2D.unloadTexture()", RaylibBindings.Texture2D.unloadTexture },
    .{ "raylib.Texture2D.loadTexture(_)", RaylibBindings.Texture2D.loadTexture },
    .{ "raylib.Camera2D.beginMode2D()", RaylibBindings.Camera2D.beginMode2D },
    .{ "raylib.Camera2D.endMode2D()", RaylibBindings.Camera2D.endMode2D },
    .{ "raylib.Camera2D.target", RaylibBindings.Camera2D.getTarget },
    .{ "raylib.Camera2D.target=(_)", RaylibBindings.Camera2D.setTarget },
    .{ "raylib.Camera2D.rotation", RaylibBindings.Camera2D.getRotation },
    .{ "raylib.Camera2D.rotation=(_)", RaylibBindings.Camera2D.setRotation },
    .{ "raylib.Camera2D.zoom", RaylibBindings.Camera2D.getZoom },
    .{ "raylib.Camera2D.zoom=(_)", RaylibBindings.Camera2D.setZoom },
    .{ "raylib.Rectangle.drawRectangleRec(_)", RaylibBindings.Rectangle.draw_rectangle_rec },
    .{ "raylib.Rectangle.x", RaylibBindings.Rectangle.get_x },
    .{ "raylib.Rectangle.x=(_)", RaylibBindings.Rectangle.set_x },
    .{ "raylib.Rectangle.y", RaylibBindings.Rectangle.get_y },
    .{ "raylib.Rectangle.y=(_)", RaylibBindings.Rectangle.set_y },
    .{ "raylib.Rectangle.width", RaylibBindings.Rectangle.get_width },
    .{ "raylib.Rectangle.width=(_)", RaylibBindings.Rectangle.set_width },
    .{ "raylib.Rectangle.height", RaylibBindings.Rectangle.get_height },
    .{ "raylib.Rectangle.height=(_)", RaylibBindings.Rectangle.set_height },
    .{ "raylib.Vector2.x", RaylibBindings.Vector2.get_x },
    .{ "raylib.Vector2.x=(_)", RaylibBindings.Vector2.set_x },
    .{ "raylib.Vector2.y", RaylibBindings.Vector2.get_y },
    .{ "raylib.Vector2.y=(_)", RaylibBindings.Vector2.set_y },
    .{ "raylib.Vector3.x", RaylibBindings.Vector3.get_x },
    .{ "raylib.Vector3.x=(_)", RaylibBindings.Vector3.set_x },
    .{ "raylib.Vector3.y", RaylibBindings.Vector3.get_y },
    .{ "raylib.Vector3.y=(_)", RaylibBindings.Vector3.set_y },
    .{ "raylib.Vector3.z", RaylibBindings.Vector3.get_z },
    .{ "raylib.Vector3.z=(_)", RaylibBindings.Vector3.set_z },
    .{ "math.Math.min(_,_)", MathBindings.min },
    .{ "math.Math.max(_,_)", MathBindings.max },
    .{ "math.Math.sin(_)", MathBindings.sin },
    .{ "math.Math.cos(_)", MathBindings.cos },
    .{ "math.Math.pow(_,_)", MathBindings.pow },
    .{ "math.Math.exp(_)", MathBindings.exp },
    .{ "math.Math.log(_)", MathBindings.log },
    .{ "math.Math.exp2(_)", MathBindings.exp2 },
    .{ "math.Math.log2(_)", MathBindings.log2 },
    .{ "math.Math.log10(_)", MathBindings.log10 },
    .{ "math.Math.sqrt(_)", MathBindings.sqrt },
    .{ "math.Math.floor(_)", MathBindings.floor },
    .{ "math.Math.ceil(_)", MathBindings.ceil },
    .{ "math.Math.round(_)", MathBindings.round },
    .{ "math.Math.tan(_)", MathBindings.tan },
    .{ "builtin.Build.shouldStop()", BuiltinBindings.shouldStop },
    // Manually added
    .{ "raylib.Raylib.loadRenderTexture(_,_)", RaylibBindings.wren_load_render_texture },
    .{ "raylib.Raylib.drawText(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_text },
    .{ "raylib.Raylib.drawTexturePro(_,_,_,_,_,_)", RaylibBindings.draw_texture_pro },
    .{ "raylib.Raylib.endTextureMode(_)", RaylibBindings.end_texture_mode },
    .{ "raylib.Raylib.unloadRenderTexture(_)", RaylibBindings.wren_unload_render_texture },
    .{ "raylib.Raylib.getFontDefault()", RaylibBindings.wren_raylib_get_font_default },
    .{ "raylib.Raylib.loadFont(_)", RaylibBindings.wren_raylib_load_font },
    .{ "raylib.Raylib.loadFontEx(_,_,_,_)", RaylibBindings.wren_raylib_load_font_ex },
    .{ "raylib.Raylib.loadFontFromImage(_,_,_)", RaylibBindings.wren_raylib_load_font_from_image },
    .{ "raylib.Raylib.loadFontFromMemory(_,_,_,_,_,_)", RaylibBindings.wren_raylib_load_font_from_memory },
    .{ "raylib.Raylib.isFontValid(_)", RaylibBindings.wren_raylib_is_font_valid },
    .{ "raylib.Raylib.loadFontData(_,_,_,_,_,_)", RaylibBindings.wren_raylib_load_font_data },
    .{ "raylib.Raylib.genImageFontAtlas(_,_,_,_,_,_)", RaylibBindings.wren_raylib_gen_image_font_atlas },
    .{ "raylib.Raylib.unloadFontData(_,_)", RaylibBindings.wren_raylib_unload_font_data },
    .{ "raylib.Raylib.unloadFont(_)", RaylibBindings.wren_raylib_unload_font },
    .{ "raylib.Raylib.exportFontAsCode(_,_)", RaylibBindings.wren_raylib_export_font_as_code },
    .{ "raylib.Raylib.drawFPS(_,_)", RaylibBindings.wren_raylib_draw_f_p_s },
    .{ "raylib.Raylib.drawText(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_text },
    .{ "raylib.Raylib.drawTextEx(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_text_ex },
    .{ "raylib.Raylib.drawTextPro(_,_,_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_text_pro },
    .{ "raylib.Raylib.drawTextCodepoint(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_text_codepoint },
    .{ "raylib.Raylib.drawTextCodepoints(_,_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_text_codepoints },
    .{ "raylib.Raylib.setTextLineSpacing(_)", RaylibBindings.wren_raylib_set_text_line_spacing },
    .{ "raylib.Raylib.measureText(_,_)", RaylibBindings.wren_raylib_measure_text },
    .{ "raylib.Raylib.measureTextEx(_,_,_,_)", RaylibBindings.wren_raylib_measure_text_ex },
    .{ "raylib.Raylib.getGlyphIndex(_,_)", RaylibBindings.wren_raylib_get_glyph_index },
    .{ "raylib.Raylib.getGlyphInfo(_,_)", RaylibBindings.wren_raylib_get_glyph_info },
    .{ "raylib.Raylib.getGlyphAtlasRec(_,_)", RaylibBindings.wren_raylib_get_glyph_atlas_rec },
    .{ "raylib.Raylib.loadUTF8(_,_)", RaylibBindings.wren_raylib_load_u_t_f8 },
    .{ "raylib.Raylib.unloadUTF8(_)", RaylibBindings.wren_raylib_unload_u_t_f8 },
    .{ "raylib.Raylib.loadCodepoints(_,_)", RaylibBindings.wren_raylib_load_codepoints },
    .{ "raylib.Raylib.unloadCodepoints(_)", RaylibBindings.wren_raylib_unload_codepoints },
    .{ "raylib.Raylib.getCodepointCount(_)", RaylibBindings.wren_raylib_get_codepoint_count },
    .{ "raylib.Raylib.getCodepoint(_,_)", RaylibBindings.wren_raylib_get_codepoint },
    .{ "raylib.Raylib.getCodepointNext(_,_)", RaylibBindings.wren_raylib_get_codepoint_next },
    .{ "raylib.Raylib.getCodepointPrevious(_,_)", RaylibBindings.wren_raylib_get_codepoint_previous },
    .{ "raylib.Raylib.codepointToUTF8(_,_)", RaylibBindings.wren_raylib_codepoint_to_u_t_f8 },
    .{ "raylib.Raylib.textCopy(_,_)", RaylibBindings.wren_raylib_text_copy },
    .{ "raylib.Raylib.textIsEqual(_,_)", RaylibBindings.wren_raylib_text_is_equal },
    .{ "raylib.Raylib.textLength(_)", RaylibBindings.wren_raylib_text_length },
    .{ "raylib.Raylib.textFormat(_,_)", RaylibBindings.wren_raylib_text_format },
    .{ "raylib.Raylib.textSubtext(_,_,_)", RaylibBindings.wren_raylib_text_subtext },
    .{ "raylib.Raylib.textReplace(_,_,_)", RaylibBindings.wren_raylib_text_replace },
    .{ "raylib.Raylib.textInsert(_,_,_)", RaylibBindings.wren_raylib_text_insert },
    .{ "raylib.Raylib.textJoin(_,_,_)", RaylibBindings.wren_raylib_text_join },
    .{ "raylib.Raylib.textSplit(_,_,_)", RaylibBindings.wren_raylib_text_split },
    .{ "raylib.Raylib.textAppend(_,_,_)", RaylibBindings.wren_raylib_text_append },
    .{ "raylib.Raylib.textFindIndex(_,_)", RaylibBindings.wren_raylib_text_find_index },
    .{ "raylib.Raylib.textToUpper(_)", RaylibBindings.wren_raylib_text_to_upper },
    .{ "raylib.Raylib.textToLower(_)", RaylibBindings.wren_raylib_text_to_lower },
    .{ "raylib.Raylib.textToPascal(_)", RaylibBindings.wren_raylib_text_to_pascal },
    .{ "raylib.Raylib.textToSnake(_)", RaylibBindings.wren_raylib_text_to_snake },
    .{ "raylib.Raylib.textToCamel(_)", RaylibBindings.wren_raylib_text_to_camel },
    .{ "raylib.Raylib.textToInteger(_)", RaylibBindings.wren_raylib_text_to_integer },
    .{ "raylib.Raylib.textToFloat(_)", RaylibBindings.wren_raylib_text_to_float },
    .{ "raylib.Raylib.drawLine3D(_,_,_)", RaylibBindings.wren_raylib_draw_line3_d },
    .{ "raylib.Raylib.drawPoint3D(_,_)", RaylibBindings.wren_raylib_draw_point3_d },
    .{ "raylib.Raylib.drawCircle3D(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_circle3_d },
    .{ "raylib.Raylib.drawTriangle3D(_,_,_,_)", RaylibBindings.wren_raylib_draw_triangle3_d },
    .{ "raylib.Raylib.drawTriangleStrip3D(_,_,_)", RaylibBindings.wren_raylib_draw_triangle_strip3_d },
    .{ "raylib.Raylib.drawCube(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_cube },
    .{ "raylib.Raylib.drawCubeV(_,_,_)", RaylibBindings.wren_raylib_draw_cube_v },
    .{ "raylib.Raylib.drawCubeWires(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_cube_wires },
    .{ "raylib.Raylib.drawCubeWiresV(_,_,_)", RaylibBindings.wren_raylib_draw_cube_wires_v },
    .{ "raylib.Raylib.drawSphere(_,_,_)", RaylibBindings.wren_raylib_draw_sphere },
    .{ "raylib.Raylib.drawSphereEx(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_sphere_ex },
    .{ "raylib.Raylib.drawSphereWires(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_sphere_wires },
    .{ "raylib.Raylib.drawCylinder(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_cylinder },
    .{ "raylib.Raylib.drawCylinderEx(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_cylinder_ex },
    .{ "raylib.Raylib.drawCylinderWires(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_cylinder_wires },
    .{ "raylib.Raylib.drawCylinderWiresEx(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_cylinder_wires_ex },
    .{ "raylib.Raylib.drawCapsule(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_capsule },
    .{ "raylib.Raylib.drawCapsuleWires(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_capsule_wires },
    .{ "raylib.Raylib.drawPlane(_,_,_)", RaylibBindings.wren_raylib_draw_plane },
    .{ "raylib.Raylib.drawRay(_,_)", RaylibBindings.wren_raylib_draw_ray },
    .{ "raylib.Raylib.drawGrid(_,_)", RaylibBindings.wren_raylib_draw_grid },
    .{ "raylib.Raylib.loadModel(_)", RaylibBindings.wren_raylib_load_model },
    .{ "raylib.Raylib.loadModelFromMesh(_)", RaylibBindings.wren_raylib_load_model_from_mesh },
    .{ "raylib.Raylib.isModelValid(_)", RaylibBindings.wren_raylib_is_model_valid },
    .{ "raylib.Raylib.unloadModel(_)", RaylibBindings.wren_raylib_unload_model },
    .{ "raylib.Raylib.getModelBoundingBox(_)", RaylibBindings.wren_raylib_get_model_bounding_box },
    .{ "raylib.Raylib.drawModel(_,_,_,_)", RaylibBindings.wren_raylib_draw_model },
    .{ "raylib.Raylib.drawModelEx(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_model_ex },
    .{ "raylib.Raylib.drawModelWires(_,_,_,_)", RaylibBindings.wren_raylib_draw_model_wires },
    .{ "raylib.Raylib.drawModelWiresEx(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_model_wires_ex },
    .{ "raylib.Raylib.drawModelPoints(_,_,_,_)", RaylibBindings.wren_raylib_draw_model_points },
    .{ "raylib.Raylib.drawModelPointsEx(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_model_points_ex },
    .{ "raylib.Raylib.drawBoundingBox(_,_)", RaylibBindings.wren_raylib_draw_bounding_box },
    .{ "raylib.Raylib.drawBillboard(_,_,_,_,_)", RaylibBindings.wren_raylib_draw_billboard },
    .{ "raylib.Raylib.drawBillboardRec(_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_billboard_rec },
    .{ "raylib.Raylib.drawBillboardPro(_,_,_,_,_,_,_,_,_)", RaylibBindings.wren_raylib_draw_billboard_pro },
    .{ "raylib.Raylib.uploadMesh(_,_)", RaylibBindings.wren_raylib_upload_mesh },
    .{ "raylib.Raylib.updateMeshBuffer(_,_,_,_,_)", RaylibBindings.wren_raylib_update_mesh_buffer },
    .{ "raylib.Raylib.unloadMesh(_)", RaylibBindings.wren_raylib_unload_mesh },
    .{ "raylib.Raylib.drawMesh(_,_,_)", RaylibBindings.wren_raylib_draw_mesh },
    .{ "raylib.Raylib.drawMeshInstanced(_,_,_,_)", RaylibBindings.wren_raylib_draw_mesh_instanced },
    .{ "raylib.Raylib.getMeshBoundingBox(_)", RaylibBindings.wren_raylib_get_mesh_bounding_box },
    .{ "raylib.Raylib.genMeshTangents(_)", RaylibBindings.wren_raylib_gen_mesh_tangents },
    .{ "raylib.Raylib.exportMesh(_,_)", RaylibBindings.wren_raylib_export_mesh },
    .{ "raylib.Raylib.exportMeshAsCode(_,_)", RaylibBindings.wren_raylib_export_mesh_as_code },
    .{ "raylib.Raylib.genMeshPoly(_,_)", RaylibBindings.wren_raylib_gen_mesh_poly },
    .{ "raylib.Raylib.genMeshPlane(_,_,_,_)", RaylibBindings.wren_raylib_gen_mesh_plane },
    .{ "raylib.Raylib.genMeshCube(_,_,_)", RaylibBindings.wren_raylib_gen_mesh_cube },
    .{ "raylib.Raylib.genMeshSphere(_,_,_)", RaylibBindings.wren_raylib_gen_mesh_sphere },
    .{ "raylib.Raylib.genMeshHemiSphere(_,_,_)", RaylibBindings.wren_raylib_gen_mesh_hemi_sphere },
    .{ "raylib.Raylib.genMeshCylinder(_,_,_)", RaylibBindings.wren_raylib_gen_mesh_cylinder },
    .{ "raylib.Raylib.genMeshCone(_,_,_)", RaylibBindings.wren_raylib_gen_mesh_cone },
    .{ "raylib.Raylib.genMeshTorus(_,_,_,_)", RaylibBindings.wren_raylib_gen_mesh_torus },
    .{ "raylib.Raylib.genMeshKnot(_,_,_,_)", RaylibBindings.wren_raylib_gen_mesh_knot },
    .{ "raylib.Raylib.genMeshHeightmap(_,_)", RaylibBindings.wren_raylib_gen_mesh_heightmap },
    .{ "raylib.Raylib.genMeshCubicmap(_,_)", RaylibBindings.wren_raylib_gen_mesh_cubicmap },
    .{ "raylib.Raylib.loadMaterials(_,_)", RaylibBindings.wren_raylib_load_materials },
    .{ "raylib.Raylib.loadMaterialDefault()", RaylibBindings.wren_raylib_load_material_default },
    .{ "raylib.Raylib.isMaterialValid(_)", RaylibBindings.wren_raylib_is_material_valid },
    .{ "raylib.Raylib.unloadMaterial(_)", RaylibBindings.wren_raylib_unload_material },
    .{ "raylib.Raylib.setMaterialTexture(_,_,_)", RaylibBindings.wren_raylib_set_material_texture },
    .{ "raylib.Raylib.setModelMeshMaterial(_,_,_)", RaylibBindings.wren_raylib_set_model_mesh_material },
    .{ "raylib.Raylib.loadModelAnimations(_,_)", RaylibBindings.wren_raylib_load_model_animations },
    .{ "raylib.Raylib.updateModelAnimation(_,_,_)", RaylibBindings.wren_raylib_update_model_animation },
    .{ "raylib.Raylib.updateModelAnimationBones(_,_,_)", RaylibBindings.wren_raylib_update_model_animation_bones },
    .{ "raylib.Raylib.unloadModelAnimation(_)", RaylibBindings.wren_raylib_unload_model_animation },
    .{ "raylib.Raylib.unloadModelAnimations(_,_)", RaylibBindings.wren_raylib_unload_model_animations },
    .{ "raylib.Raylib.isModelAnimationValid(_,_)", RaylibBindings.wren_raylib_is_model_animation_valid },
    .{ "raylib.Raylib.checkCollisionSpheres(_,_,_,_)", RaylibBindings.wren_raylib_check_collision_spheres },
    .{ "raylib.Raylib.checkCollisionBoxes(_,_)", RaylibBindings.wren_raylib_check_collision_boxes },
    .{ "raylib.Raylib.checkCollisionBoxSphere(_,_,_)", RaylibBindings.wren_raylib_check_collision_box_sphere },
    .{ "raylib.Raylib.getRayCollisionSphere(_,_,_)", RaylibBindings.wren_raylib_get_ray_collision_sphere },
    .{ "raylib.Raylib.getRayCollisionBox(_,_)", RaylibBindings.wren_raylib_get_ray_collision_box },
    .{ "raylib.Raylib.getRayCollisionMesh(_,_,_)", RaylibBindings.wren_raylib_get_ray_collision_mesh },
    .{ "raylib.Raylib.getRayCollisionTriangle(_,_,_,_)", RaylibBindings.wren_raylib_get_ray_collision_triangle },
    .{ "raylib.Raylib.getRayCollisionQuad(_,_,_,_,_)", RaylibBindings.wren_raylib_get_ray_collision_quad },
    .{ "raylib.Raylib.initAudioDevice()", RaylibBindings.wren_raylib_init_audio_device },
    .{ "raylib.Raylib.closeAudioDevice()", RaylibBindings.wren_raylib_close_audio_device },
    .{ "raylib.Raylib.isAudioDeviceReady()", RaylibBindings.wren_raylib_is_audio_device_ready },
    .{ "raylib.Raylib.setMasterVolume(_)", RaylibBindings.wren_raylib_set_master_volume },
    .{ "raylib.Raylib.getMasterVolume()", RaylibBindings.wren_raylib_get_master_volume },
    .{ "raylib.Raylib.loadWave(_)", RaylibBindings.wren_raylib_load_wave },
    .{ "raylib.Raylib.loadWaveFromMemory(_,_,_)", RaylibBindings.wren_raylib_load_wave_from_memory },
    .{ "raylib.Raylib.isWaveValid(_)", RaylibBindings.wren_raylib_is_wave_valid },
    .{ "raylib.Raylib.loadSound(_)", RaylibBindings.wren_raylib_load_sound },
    .{ "raylib.Raylib.loadSoundFromWave(_)", RaylibBindings.wren_raylib_load_sound_from_wave },
    .{ "raylib.Raylib.loadSoundAlias(_)", RaylibBindings.wren_raylib_load_sound_alias },
    .{ "raylib.Raylib.isSoundValid(_)", RaylibBindings.wren_raylib_is_sound_valid },
    .{ "raylib.Raylib.updateSound(_,_,_)", RaylibBindings.wren_raylib_update_sound },
    .{ "raylib.Raylib.unloadWave(_)", RaylibBindings.wren_raylib_unload_wave },
    .{ "raylib.Raylib.unloadSound(_)", RaylibBindings.wren_raylib_unload_sound },
    .{ "raylib.Raylib.unloadSoundAlias(_)", RaylibBindings.wren_raylib_unload_sound_alias },
    .{ "raylib.Raylib.exportWave(_,_)", RaylibBindings.wren_raylib_export_wave },
    .{ "raylib.Raylib.exportWaveAsCode(_,_)", RaylibBindings.wren_raylib_export_wave_as_code },
    .{ "raylib.Raylib.playSound(_)", RaylibBindings.wren_raylib_play_sound },
    .{ "raylib.Raylib.stopSound(_)", RaylibBindings.wren_raylib_stop_sound },
    .{ "raylib.Raylib.pauseSound(_)", RaylibBindings.wren_raylib_pause_sound },
    .{ "raylib.Raylib.resumeSound(_)", RaylibBindings.wren_raylib_resume_sound },
    .{ "raylib.Raylib.isSoundPlaying(_)", RaylibBindings.wren_raylib_is_sound_playing },
    .{ "raylib.Raylib.setSoundVolume(_,_)", RaylibBindings.wren_raylib_set_sound_volume },
    .{ "raylib.Raylib.setSoundPitch(_,_)", RaylibBindings.wren_raylib_set_sound_pitch },
    .{ "raylib.Raylib.setSoundPan(_,_)", RaylibBindings.wren_raylib_set_sound_pan },
    .{ "raylib.Raylib.waveCopy(_)", RaylibBindings.wren_raylib_wave_copy },
    .{ "raylib.Raylib.waveCrop(_,_,_)", RaylibBindings.wren_raylib_wave_crop },
    .{ "raylib.Raylib.waveFormat(_,_,_,_)", RaylibBindings.wren_raylib_wave_format },
    .{ "raylib.Raylib.loadWaveSamples(_)", RaylibBindings.wren_raylib_load_wave_samples },
    .{ "raylib.Raylib.unloadWaveSamples(_)", RaylibBindings.wren_raylib_unload_wave_samples },
    .{ "raylib.Raylib.loadMusicStream(_)", RaylibBindings.wren_raylib_load_music_stream },
    .{ "raylib.Raylib.loadMusicStreamFromMemory(_,_,_)", RaylibBindings.wren_raylib_load_music_stream_from_memory },
    .{ "raylib.Raylib.isMusicValid(_)", RaylibBindings.wren_raylib_is_music_valid },
    .{ "raylib.Raylib.unloadMusicStream(_)", RaylibBindings.wren_raylib_unload_music_stream },
    .{ "raylib.Raylib.playMusicStream(_)", RaylibBindings.wren_raylib_play_music_stream },
    .{ "raylib.Raylib.isMusicStreamPlaying(_)", RaylibBindings.wren_raylib_is_music_stream_playing },
    .{ "raylib.Raylib.updateMusicStream(_)", RaylibBindings.wren_raylib_update_music_stream },
    .{ "raylib.Raylib.stopMusicStream(_)", RaylibBindings.wren_raylib_stop_music_stream },
    .{ "raylib.Raylib.pauseMusicStream(_)", RaylibBindings.wren_raylib_pause_music_stream },
    .{ "raylib.Raylib.resumeMusicStream(_)", RaylibBindings.wren_raylib_resume_music_stream },
    .{ "raylib.Raylib.seekMusicStream(_,_)", RaylibBindings.wren_raylib_seek_music_stream },
    .{ "raylib.Raylib.setMusicVolume(_,_)", RaylibBindings.wren_raylib_set_music_volume },
    .{ "raylib.Raylib.setMusicPitch(_,_)", RaylibBindings.wren_raylib_set_music_pitch },
    .{ "raylib.Raylib.setMusicPan(_,_)", RaylibBindings.wren_raylib_set_music_pan },
    .{ "raylib.Raylib.getMusicTimeLength(_)", RaylibBindings.wren_raylib_get_music_time_length },
    .{ "raylib.Raylib.getMusicTimePlayed(_)", RaylibBindings.wren_raylib_get_music_time_played },
    .{ "raylib.Raylib.loadAudioStream(_,_,_)", RaylibBindings.wren_raylib_load_audio_stream },
    .{ "raylib.Raylib.isAudioStreamValid(_)", RaylibBindings.wren_raylib_is_audio_stream_valid },
    .{ "raylib.Raylib.unloadAudioStream(_)", RaylibBindings.wren_raylib_unload_audio_stream },
    .{ "raylib.Raylib.updateAudioStream(_,_,_)", RaylibBindings.wren_raylib_update_audio_stream },
    .{ "raylib.Raylib.isAudioStreamProcessed(_)", RaylibBindings.wren_raylib_is_audio_stream_processed },
    .{ "raylib.Raylib.playAudioStream(_)", RaylibBindings.wren_raylib_play_audio_stream },
    .{ "raylib.Raylib.pauseAudioStream(_)", RaylibBindings.wren_raylib_pause_audio_stream },
    .{ "raylib.Raylib.resumeAudioStream(_)", RaylibBindings.wren_raylib_resume_audio_stream },
    .{ "raylib.Raylib.isAudioStreamPlaying(_)", RaylibBindings.wren_raylib_is_audio_stream_playing },
    .{ "raylib.Raylib.stopAudioStream(_)", RaylibBindings.wren_raylib_stop_audio_stream },
    .{ "raylib.Raylib.setAudioStreamVolume(_,_)", RaylibBindings.wren_raylib_set_audio_stream_volume },
    .{ "raylib.Raylib.setAudioStreamPitch(_,_)", RaylibBindings.wren_raylib_set_audio_stream_pitch },
    .{ "raylib.Raylib.setAudioStreamPan(_,_)", RaylibBindings.wren_raylib_set_audio_stream_pan },
    .{ "raylib.Raylib.setAudioStreamBufferSizeDefault(_)", RaylibBindings.wren_raylib_set_audio_stream_buffer_size_default },
    .{ "raylib.Raylib.setAudioStreamCallback(_,_)", RaylibBindings.wren_raylib_set_audio_stream_callback },
    .{ "raylib.Raylib.attachAudioStreamProcessor(_,_)", RaylibBindings.wren_raylib_attach_audio_stream_processor },
    .{ "raylib.Raylib.detachAudioStreamProcessor(_,_)", RaylibBindings.wren_raylib_detach_audio_stream_processor },
    .{ "raylib.Raylib.attachAudioMixedProcessor(_)", RaylibBindings.wren_raylib_attach_audio_mixed_processor },
    .{ "raylib.Raylib.detachAudioMixedProcessor(_)", RaylibBindings.wren_raylib_detach_audio_mixed_processor },
    .{ "embed.Load.foreignFunction(_,_)", root.wren_load_foreign_function },
});

pub const WrenForeignMethodFn = fn (?*wren.WrenVM) callconv(.c) void;
pub const WrenForeignClassAllocatorFn = fn (?*wren.WrenVM) callconv(.c) void;
pub const ForeignClass = struct { allocate: ?*const WrenForeignClassAllocatorFn };

pub const ForeignClassBindings = std.StaticStringMap(ForeignClass).initComptime(.{
    .{ "raylib.Color", ForeignClass{ .allocate = RaylibBindings.Color.allocate } },
    .{ "raylib.RenderTexture2D", ForeignClass{ .allocate = RaylibBindings.RenderTexture2D.allocate } },
    .{ "raylib.Camera2D", ForeignClass{ .allocate = RaylibBindings.Camera2D.allocate } },
    .{ "raylib.Vector2", ForeignClass{ .allocate = RaylibBindings.Vector2.allocate } },
    .{ "raylib.Vector3", ForeignClass{ .allocate = RaylibBindings.Vector3.allocate } },
    .{ "raylib.Rectangle", ForeignClass{ .allocate = RaylibBindings.Rectangle.allocate } },
    .{ "raylib.Image", ForeignClass{ .allocate = RaylibBindings.Image.allocate } },
    .{ "raylib.Font", ForeignClass{ .allocate = RaylibBindings.Font.allocate } },
    .{ "raylib.Wave", ForeignClass{ .allocate = RaylibBindings.Wave.allocate } },
    .{ "raylib.Sound", ForeignClass{ .allocate = RaylibBindings.Sound.allocate } },
    .{ "raylib.Music", ForeignClass{ .allocate = RaylibBindings.Music.allocate } },
    .{ "raylib.AudioStream", ForeignClass{ .allocate = RaylibBindings.AudioStream.allocate } },
});
